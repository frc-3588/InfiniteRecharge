// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.DoubleSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import com.revrobotics.CANEncoder;

/**
 *
 */
public class Climb extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    private CANEncoder climbWinchEncoder;
    // private CANEncoder climbWinchEncoder;
    public double CLIMBWINCH = 0.7;
    public double CLIMBLIFT = 0.6;
    private double winchCircumference = 2.5 * Math.PI;// drum included
    private double maxTiltedHeight = 80.875; // in inches & added 2 inches to the manual
    private double maxBalancedHeight = 65; // in inches & added 2 inches to the manual
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private DoubleSolenoid doubleSolenoid;
private WPI_TalonSRX climbLiftMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    CANSparkMax climbWinchMotor;
    // CANSparkMax climbWinchMotor;

    public Climb() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
doubleSolenoid = new DoubleSolenoid(0, 0, 1);
addChild("DoubleSolenoid",doubleSolenoid);

        
climbLiftMotor = new WPI_TalonSRX(7);


        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        climbWinchMotor = new CANSparkMax(8, MotorType.kBrushless);
        // climbWinchMotor = new CANSparkMax(4, MotorType.kBrushless);
        extendLockPiston();
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void setClimbLiftMotor(double power) {
        climbLiftMotor.set(power);
    }

    public void setClimbWinchMotor(double power) {
        climbWinchMotor.set(power);
    }

    public double getClimbWinchEncoder() {
        return climbWinchEncoder.getPosition();
    }

    // FOR CALCULATIONS ONLY!
    public double getMaxHeightRotations() {
        return maxTiltedHeight / winchCircumference;
    }

    public double getMiddleHeightRotations() {
        return maxBalancedHeight / winchCircumference;
    }

    public void setManualClimb(double power){
        climbLiftMotor.set(power);
    }
    public void extendLockPiston(){
        doubleSolenoid.set(DoubleSolenoid.Value.kForward);
    }
    public void retractLockPiston(){
        doubleSolenoid.set(DoubleSolenoid.Value.kReverse);
    }
    public DoubleSolenoid.Value getLockPiston(){
       return doubleSolenoid.get();
    }
}
