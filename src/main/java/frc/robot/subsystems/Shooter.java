// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;

import com.revrobotics.CANEncoder;
import com.revrobotics.CANPIDController;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkMax;
import com.revrobotics.ControlType;
import com.revrobotics.EncoderType;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

/**
 *
 */
public class Shooter extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    public final double power = 0.8;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    CANSparkMax shooterMotor;
    CANPIDController pidShooterController;
    CANEncoder shooterEncoder; 
    public double kP = 6e-5; 
    public double kI = 0;
    public double kD = 0; 
    public double kIz = 0; 
    public double kFF = 0.000015; 
    public double kMaxOutput = 1; 
    public double kMinOutput = -1;
    public double FRONTPOWERPORTRPM = 4000;
    public double FRONTCONTROLPANELRPM = 6000;
    public double BACKCONTROLPANELRPM = 7500;

    public Shooter() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        shooterMotor = new CANSparkMax(9, MotorType.kBrushless);
        shooterMotor.restoreFactoryDefaults();
        pidShooterController = shooterMotor.getPIDController();
        shooterEncoder = shooterMotor.getEncoder(EncoderType.kHallSensor, 42);
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
    public void setShooterPower(double power) {
        shooterMotor.set(power);
    }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void setProportionalGain(double P) {
        pidShooterController.setP(P);
    }
    public void setIntegralGain(double I) {
        pidShooterController.setI(I);
    }
    public void setDerivativeGain(double D) {
        pidShooterController.setD(D);
    }
    public void setIntegralZone(double IZ) {
        pidShooterController.setIZone(IZ);
    }
    public void setFeedForward(double FF) {
        pidShooterController.setFF(FF);
    }
    public void setPowerRange(double minoutput, double maxoutput) {
        pidShooterController.setOutputRange(minoutput, maxoutput);
    }
    public void runPID(double RPM) {
        pidShooterController.setReference(RPM, ControlType.kVelocity);
    }
    public double getEncoderVelocity() {
       return shooterEncoder.getVelocity();
    }
}
